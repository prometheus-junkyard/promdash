angular.module("Prometheus.directives").directive('expression', ["$timeout", "MetricNamesQuerier", "VariableInterpolator", function($timeout, MetricNamesQuerier, VariableInterpolator) {
  return {
    restrict: "E",
    scope: {
      axes: "=",
      endTime: "=",
      expr: "=",
      index: "=",
      legendFormatStrings: "=",
      range: "=",
      servers: "=",
      serversById: "=",
      type: "@",
      vars: "="
    },
    link: function(scope, element, attrs) {
      var el = element[0].querySelector("[ng-model='expr.expression']");
      scope.updateMetricNames = function() {
        var server = scope.serversById[scope.expr.serverID];
        if (server === undefined) {
          return;
        }
        MetricNamesQuerier(scope.expr.serverID, server.url, scope);
      };

      scope.linkToPrometheus = function() {
        if (!scope.expr.axisID && scope.type !== "pie") {
          return;
        }
        var server = scope.serversById[scope.expr.serverID];
        if (server === undefined) {
          return;
        }
        var stacked = "";
        if (scope.type !== "pie") {
          scope.axes.forEach(function(a) {
            if (a.id === scope.expr.axisID && a.renderer === "stack") {
              stacked = "true";
            }
          });
        }
        var endTime = "";
        if (scope.endTime) {
          var d = new Date(scope.endTime);
          endTime = [d.getFullYear(), d.getMonth() + 1, d.getDate()].join("-") + " " + d.getUTCHours() + ":" + d.getUTCMinutes();
        }

        var expression = VariableInterpolator(scope.expr.expression, scope.vars);
        var expr = {
          expr: expression,
          range_input: scope.range || "",
          end_input: endTime,
          step_input: "",
          stacked: stacked,
          tab: 0
        }

        var hash = escape(JSON.stringify([expr]));
        return server.url + "graph#" + hash;
      };

      scope.setExpression = function(metricName) {
        scope.expr.expression = metricName;
      };

      scope.appendToExpression = function(expr, metricName) {
        var lastCursorPosition = el.selectionStart;
        expr.expression = insertSelection(metricName, el);

        $timeout(function() {
          el.focus();
          el.setSelectionRange(lastCursorPosition, lastCursorPosition + metricName.length)
        }, 0);
      };

      function insertSelection(metricName, el) {
        var val = el.value;
        return val.slice(0, el.selectionStart) + metricName + val.slice(el.selectionEnd, val.length);
      }

      scope.removeExpression = function() {
        scope.$emit('removeExpression', scope.index);
      };

      // Do initial population of metric names.
      scope.updateMetricNames();
    },
    templateUrl: "<%= asset_path('expression_template.html') %>"
  };
}]);
